{"version":3,"sources":["context/FetchContext.js","components/Logo.js","components/Navbar.js","hoc/Jumbotron.js","components/SearchBox.js","components/CategorySelect.js","components/Header.js","components/ImageCard.js","components/CardList.js","components/NoResult.js","components/Spinner.js","containers/App.js","serviceWorker.js","index.js"],"names":["FetchContext","React","createContext","results","isLoading","searchPhrase","category","onSearch","onFilter","Logo","className","options","max","style","color","Navbar","Jumbotron","props","children","SearchBox","focusInput","useRef","useEffect","current","focus","Consumer","context","type","placeholder","ref","onChange","CategorySelect","key","text","value","Form","Field","control","Select","Header","Card","useContext","map","item","id","src","largeImageURL","alt","user","downloads","CardList","NoResult","textAlign","padding","Spinner","App","state","perPage","pixabayFetchHandler","setState","url","process","fetch","then","res","json","data","hits","catch","error","console","log","searchPhraseHandler","event","target","cardListDisplayHandler","length","this","Provider","bg","href","size","bannerColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a297cd87.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FetchContext = React.createContext({\r\n  results: [],\r\n  isLoading: true,\r\n  searchPhrase: \"\",\r\n  category: \"\",\r\n  onSearch: () => {},\r\n  onFilter: () => {}\r\n});\r\n\r\nexport default FetchContext;\r\n","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"logo\">\r\n      <Tilt className=\"Tilt\" options={{ max: 55 }}>\r\n        <div className=\"Tilt-inner\">\r\n          <h1>\r\n            <i className=\"angle double right icon\"></i>Paper\r\n            <span style={{ color: \"#c6ffdd\" }}>&middot;</span>\r\n            <span style={{ color: \" #fbd786\" }}>Zone</span>\r\n          </h1>\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navigation\">\r\n      <div className=\"ui menu\">\r\n        <div className=\"header item logo\">\r\n          <Logo />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst Jumbotron = props => {\r\n  return <div className=\"form-filters jumbotron\">{props.children}</div>;\r\n};\r\n\r\nexport default Jumbotron;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport FetchContext from \"../context/FetchContext\";\r\n\r\nconst SearchBox = props => {\r\n  const focusInput = useRef(null);\r\n  useEffect(() => {\r\n    focusInput.current.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"ui icon input searchbox\">\r\n      <i className=\"search icon\"></i>\r\n      <FetchContext.Consumer>\r\n        {context => {\r\n          return (\r\n            <input\r\n              type=\"search\"\r\n              placeholder=\"Search images and filter by types...\"\r\n              ref={focusInput}\r\n              onChange={context.onSearch}\r\n            />\r\n          );\r\n        }}\r\n      </FetchContext.Consumer>\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport { Form, Select } from \"semantic-ui-react\";\r\nimport FetchContext from \"../context/FetchContext\";\r\n\r\nconst CategorySelect = () => {\r\n  const options = [\r\n    { key: \"f\", text: \"Fashion\", value: \"fashion\" },\r\n    { key: \"n\", text: \"Nature\", value: \"nature\" },\r\n    { key: \"b\", text: \"Backgrounds\", value: \"backgrounds\" },\r\n    { key: \"s\", text: \"Science\", value: \"science\" },\r\n    { key: \"e\", text: \"Education\", value: \"education\" },\r\n    { key: \"p\", text: \"People\", value: \"people\" },\r\n    { key: \"fe\", text: \"Feelings\", value: \"feelings\" },\r\n    { key: \"r\", text: \"Religion\", value: \"religion\" },\r\n    { key: \"h\", text: \"Health\", value: \"health\" },\r\n    { key: \"pla\", text: \"Places\", value: \"places\" },\r\n    { key: \"ani\", text: \"Animals\", value: \"animals\" },\r\n    { key: \"i\", text: \"Industry\", value: \"industry\" },\r\n    { key: \"c\", text: \"Computer\", value: \"computer\" },\r\n    { key: \"spo\", text: \"Sports\", value: \"sports\" },\r\n    { key: \"t\", text: \"Transportation\", value: \"transportation\" },\r\n    { key: \"tra\", text: \"Travel\", value: \"travel\" },\r\n    { key: \"bui\", text: \"Buildings\", value: \"buildings\" },\r\n    { key: \"busi\", text: \"Business\", value: \"business\" },\r\n    { key: \"mus\", text: \"Music\", value: \"music\" }\r\n  ];\r\n  return (\r\n    <div className=\"category\">\r\n      <FetchContext.Consumer>\r\n        {context => {\r\n          return (\r\n            <Form.Field\r\n              control={Select}\r\n              options={options}\r\n              placeholder=\"Filter by category\"\r\n              onChange={context.onFilter}\r\n            />\r\n          );\r\n        }}\r\n      </FetchContext.Consumer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategorySelect;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header ui shadow\">\r\n      <h2>Stunning free images & royalty free stock</h2>\r\n      <p>Access over 1 million images instantly from the pixabay api</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport FetchContext from \"../context/FetchContext\";\r\nconst Card = () => {\r\n  const context = useContext(FetchContext);\r\n  return (\r\n    <div className=\"card\">\r\n      {context.results.map(item => (\r\n        <Fragment key={item.id}>\r\n          <SRLWrapper>\r\n            <img\r\n              key={item.id}\r\n              src={item.largeImageURL}\r\n              alt={`Photograph with ðŸ’– by ${item.user} with ${item.downloads} downloads`}\r\n            />\r\n          </SRLWrapper>\r\n        </Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../components/ImageCard\";\r\n\r\nconst CardList = () => {\r\n  return (\r\n    <div className=\"container cardlist\">\r\n      <Card />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst NoResult = () => {\r\n  return (\r\n    <h1 style={{ textAlign: \"center\", padding: \"1rem 0\" }}>No Results Found</h1>\r\n  );\r\n};\r\n\r\nexport default NoResult;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"sk-cube-grid\">\r\n      <div className=\"sk-cube sk-cube1\"></div>\r\n      <div className=\"sk-cube sk-cube2\"></div>\r\n      <div className=\"sk-cube sk-cube3\"></div>\r\n      <div className=\"sk-cube sk-cube4\"></div>\r\n      <div className=\"sk-cube sk-cube5\"></div>\r\n      <div className=\"sk-cube sk-cube6\"></div>\r\n      <div className=\"sk-cube sk-cube7\"></div>\r\n      <div className=\"sk-cube sk-cube8\"></div>\r\n      <div className=\"sk-cube sk-cube9\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport FetchContext from \"../context/FetchContext\";\r\nimport ParticlesBg from \"particles-bg\";\r\nimport GithubCorner from \"react-github-corner\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Jumbotron from \"../hoc/Jumbotron\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport CategorySelect from \"../components/CategorySelect\";\r\nimport Header from \"../components/Header\";\r\nimport CardList from \"../components/CardList\";\r\nimport NoResult from \"../components/NoResult\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    results: [],\r\n    searchPhrase: \"\",\r\n    isLoading: true,\r\n    perPage: 20\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.pixabayFetchHandler();\r\n  }\r\n\r\n  pixabayFetchHandler = () => {\r\n    this.setState({ isLoading: true });\r\n    const url = `https://pixabay.com/api/?key=${process.env.REACT_APP_API_KEY}&q=${this.state.searchPhrase}&image_type=photo&per_page=${this.state.perPage}&safesearch=true`;\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({ results: data.hits, isLoading: false });\r\n      })\r\n      .catch(error => console.log(\"Failure to fetch images\", error));\r\n  };\r\n\r\n  searchPhraseHandler = event => {\r\n    this.setState({ searchPhrase: event.target.value }, () =>\r\n      this.pixabayFetchHandler()\r\n    );\r\n  };\r\n\r\n  cardListDisplayHandler = () => {\r\n    if (this.state.isLoading === true) {\r\n      return <Spinner />;\r\n    }\r\n    return this.state.results.length > 0 ? <CardList /> : <NoResult />;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <SimpleReactLightbox>\r\n          <Navbar />\r\n          <Header />\r\n          <FetchContext.Provider\r\n            value={{\r\n              searchPhrase: this.state.searchPhrase,\r\n              onSearch: this.searchPhraseHandler,\r\n              isLoading: this.state.isLoading,\r\n              results: this.state.results\r\n            }}\r\n          >\r\n            <Jumbotron>\r\n              <SearchBox />\r\n              <CategorySelect />\r\n            </Jumbotron>\r\n            {this.cardListDisplayHandler()}\r\n          </FetchContext.Provider>\r\n          <ParticlesBg type=\"polygon\" bg={true} />\r\n          <GithubCorner\r\n            href=\"https://github.com/danielkpodo/paper-zone\"\r\n            size=\"65\"\r\n            bannerColor=\"#21243D\"\r\n            className=\"github\"\r\n            target=\"_blank\"\r\n          />\r\n        </SimpleReactLightbox>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}